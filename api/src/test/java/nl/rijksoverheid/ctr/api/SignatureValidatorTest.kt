/*
 * Copyright (c) 2020 De Staat der Nederlanden, Ministerie van Volksgezondheid, Welzijn en Sport.
 *  Licensed under the EUROPEAN UNION PUBLIC LICENCE v. 1.2
 *
 *  SPDX-License-Identifier: EUPL-1.2
 */
package nl.rijksoverheid.ctr.api

import java.io.ByteArrayInputStream
import java.security.cert.CertificateFactory
import java.security.cert.X509Certificate
import java.time.Clock
import java.time.Instant
import java.time.ZoneId
import nl.rijksoverheid.ctr.api.signing.SignatureValidationException
import nl.rijksoverheid.ctr.api.signing.SignatureValidator
import nl.rijksoverheid.ctr.api.signing.certificates.EV_ROOT_CA
import org.bouncycastle.jce.provider.BouncyCastleProvider
import org.bouncycastle.util.encoders.Base64
import org.junit.Assert.assertEquals
import org.junit.Assert.assertThrows
import org.junit.Ignore
import org.junit.Test

private val TEST_SIGNATURE = Base64.decode(
    "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"
)

private val TEST_PAYLOAD = "TEST CONTENT".toByteArray()

class SignatureValidatorTest {

    @Test
    fun `signature validator rejects signature with wrong signing certificate`() {
        val provider = BouncyCastleProvider()
        // wrong certificate for signing
        val signingCertificate = CertificateFactory.getInstance("X509", provider)
            .generateCertificate(SignatureValidator::class.java.getResourceAsStream("/ca-pki-overheid.pem")) as X509Certificate

        val validator = SignatureValidator.Builder()
            .addTrustedCertificate(EV_ROOT_CA)
            .signingCertificate(listOf(signingCertificate))
            .build()

        val exception = assertThrows(SignatureValidationException::class.java) {
            validator.verifySignature(
                ByteArrayInputStream(TEST_PAYLOAD),
                TEST_SIGNATURE
            )
        }

        assertEquals("The cert path cannot be validated", exception.message)
    }

    @Test
    @Ignore
    fun `signature validator validates correct PKI-O signature`() {
        // defaults for Staat der Nederlanden trust anchor and authority key id
        val validator = SignatureValidator.Builder()
            .addTrustedCertificate(EV_ROOT_CA)
            .build()

        validator.verifySignature(
            ByteArrayInputStream(Base64.decode("eyJhbmRyb2lkTWluaW11bVZlcnNpb24iOjEsImFuZHJvaWRSZWNvbW1lbmRlZFZlcnNpb24iOjMxMzMsImFuZHJvaWRNaW5pbXVtVmVyc2lvbk1lc3NhZ2UiOiJPbSBkZSBhcHAgdGUgZ2VicnVpa2VuIGhlYiBqZSBkZSBsYWF0c3RlIHZlcnNpZSB1aXQgZGUgc3RvcmUgbm9kaWcuIiwicGxheVN0b3JlVVJMIjoiaHR0cHM6Ly9wbGF5Lmdvb2dsZS5jb20vc3RvcmUvYXBwcy9kZXRhaWxzP2lkPW5sLnJpamtzb3ZlcmhlaWQuY3RyLnZlcmlmaWVyIiwiaW9zTWluaW11bVZlcnNpb24iOiIxLjAuMCIsImlvc1JlY29tbWVuZGVkVmVyc2lvbiI6IjIuNi4xIiwiaW9zTWluaW11bVZlcnNpb25NZXNzYWdlIjoiT20gZGUgYXBwIHRlIGdlYnJ1aWtlbiBoZWIgamUgZGUgbGFhdHN0ZSB2ZXJzaWUgdWl0IGRlIHN0b3JlIG5vZGlnLiIsImlvc0FwcFN0b3JlVVJMIjoiaHR0cHM6Ly9hcHBzLmFwcGxlLmNvbS9ubC9hcHAvc2Nhbm5lci12b29yLWNvcm9uYWNoZWNrL2lkMTU0OTg0MjY2MSIsImFwcERlYWN0aXZhdGVkIjpmYWxzZSwiY29uZmlnVFRMIjozMTUzNjAwMCwiY29uZmlnTWluaW11bUludGVydmFsU2Vjb25kcyI6NjAsImNvbmZpZ0FsbW9zdE91dE9mRGF0ZVdhcm5pbmdTZWNvbmRzIjoxMjAsInVwZ3JhZGVSZWNvbW1lbmRhdGlvbkludGVydmFsIjoyNCwibWF4VmFsaWRpdHlIb3VycyI6NDAsImNsb2NrRGV2aWF0aW9uVGhyZXNob2xkU2Vjb25kcyI6MzAsInNjYW5Mb2NrV2FybmluZ1NlY29uZHMiOjM2MDAsInNjYW5Mb2NrU2Vjb25kcyI6MzAwLCJzY2FuTG9nU3RvcmFnZVNlY29uZHMiOjM2MDAsImluZm9ybWF0aW9uVVJMIjoiaHR0cHM6Ly9jb3JvbmFjaGVjay5ubCIsImFuZHJvaWRFbmFibGVWZXJpZmljYXRpb25Qb2xpY3lWZXJzaW9uIjozMTI3LCJpT1NFbmFibGVWZXJpZmljYXRpb25Qb2xpY3lWZXJzaW9uIjoiMi43LjAiLCJkZWZhdWx0RXZlbnQiOiJjY2U0MTU4Zi01ODJmLTQ5YzAtOWQ0ZC02MTFjZTM4NjY5OTkiLCJ1bml2ZXJzYWxMaW5rRG9tYWlucyI6W3sidXJsIjoid2ViLmFjYy5jb3JvbmFjaGVjay5ubCIsIm5hbWUiOiJDb3JvbmFDaGVjayBhcHAifV0sImRvbWVzdGljVmVyaWZpY2F0aW9uUnVsZXMiOnsicXJWYWxpZEZvclNlY29uZHMiOjYwLCJwcm9vZklkZW50aWZpZXJEZW55bGlzdCI6eyJTVEZOeDdBMjRaSTF1NVdEWDhYOUJBPT0iOnRydWV9fSwiZXVyb3BlYW5WZXJpZmljYXRpb25SdWxlcyI6eyJ0ZXN0QWxsb3dlZFR5cGVzIjpbIkxQMjE3MTk4LTMiLCJMUDY0NjQtNCJdLCJ0ZXN0VmFsaWRpdHlIb3VycyI6MjUsInZhY2NpbmF0aW9uVmFsaWRpdHlEZWxheUJhc2VkT25WYWNjaW5hdGlvbkRhdGUiOnRydWUsInZhY2NpbmF0aW9uVmFsaWRpdHlEZWxheUludG9Gb3JjZURhdGUiOiIyMDIxLTA3LTA2IiwidmFjY2luYXRpb25WYWxpZGl0eURlbGF5RGF5cyI6MTQsInZhY2NpbmF0aW9uSmFuc3NlblZhbGlkaXR5RGVsYXlEYXlzIjoyOCwidmFjY2luYXRpb25KYW5zc2VuVmFsaWRpdHlEZWxheUludG9Gb3JjZURhdGUiOiIyMDIxLTA3LTI0IiwidmFjY2luYXRpb25WYWxpZGl0eURheXMiOjI3MCwidmFjY2luYXRpb25WYWxpZGl0eUludG9Gb3JjZURhdGUiOiIyMDIyLTAxLTAxIiwidmFjY2luZUFsbG93ZWRQcm9kdWN0cyI6WyJFVS8xLzIwLzE1MjgiLCJFVS8xLzIwLzE1MDciLCJFVS8xLzIxLzE1MjkiLCJFVS8xLzIwLzE1MjUiLCJDb3Zpc2hpZWxkIiwiQkJJQlAtQ29yViIsIkNvcm9uYVZhYyJdLCJyZWNvdmVyeVZhbGlkRnJvbURheXMiOjExLCJyZWNvdmVyeVZhbGlkVW50aWxEYXlzIjoxODAsImlzc3VlckNvdW50cnlDb2RlRnJvbUNBU0lzbGFuZFNBTiI6eyJBQlciOiJBVyIsIkNVVyI6IkNXIiwiU1hNIjoiU1gifSwiY29ycmVjdGVkSXNzdWVyQ291bnRyeUNvZGVzIjp7IkNOQU0iOiJGUiJ9LCJwcm9vZklkZW50aWZpZXJEZW55bGlzdCI6eyI3RVhtWEJoZnlCWkpndDFka2kwY2ZRPT0iOnRydWV9fX0=")),
            Base64.decode(
                ""
            )
        )
    }

    @Test
    fun `validates with certificate with RND coronatester nl`() {
        // SubjectDN: C=NL,O=Ministerie van Volksgezondheid\, Welzijn en Sport,OU=Corona Alerters,CN=.coronatester.nl
//        Validity
//          Not Before: Aug 24 15:21:19 2021 GMT
//          Not After : Aug 22 15:21:19 2031 GMT
        val cert = """-----BEGIN CERTIFICATE-----
MIIDlTCCAn2gAwIBAgIUatwRVhlUM8EF3SYqWT/gvSsCwyswDQYJKoZIhvcNAQEL
BQAwWjErMCkGA1UEAwwiU3RhYXQgZGVyIE5lZGVybGFuZGVuIFJvb3QgQ0EgLSBH
MzEeMBwGA1UECgwVU3RhYXQgZGVyIE5lZGVybGFuZGVuMQswCQYDVQQGEwJOTDAe
Fw0yMTA4MjQxNTIxMTlaFw0zMTA4MjIxNTIxMTlaMFoxKzApBgNVBAMMIlN0YWF0
IGRlciBOZWRlcmxhbmRlbiBSb290IENBIC0gRzMxHjAcBgNVBAoMFVN0YWF0IGRl
ciBOZWRlcmxhbmRlbjELMAkGA1UEBhMCTkwwggEiMA0GCSqGSIb3DQEBAQUAA4IB
DwAwggEKAoIBAQC/bFPnWkVX7/ykHklFEqE+N3VWbF6KLqcLDfaBRINZMrIU2z38
IAQg63CawPflPZKlpYZ6qTBiv1mofqw0JO4B44Zp3P15ReUzvwyOjUmp/Zt57cKk
D8u7LiygP9IWUFNaCGk1mAAwG8bw3FGJfeJpgTmsAANFJv4PPBjC5oAvgKR/A3DH
nuGgNMZW6XGqQyfDUEFIs62migs/lLSO2SlkiFuenol1rL83NacPdR+nh8FZgh3a
SsJZN2w3RmEQQSGmzqxidG/JscxeSje0o9WFjPKR+/rL+tLBZ5jZPQhZGYa5S5N3
gHbrCCMDC8HlM4azy2Qpaaep6TBdKvFgkNH5AgMBAAGjUzBRMB0GA1UdDgQWBBRW
B1bgf7BLO4Dj/X3z8OaL8SefmTAfBgNVHSMEGDAWgBRWB1bgf7BLO4Dj/X3z8OaL
8SefmTAPBgNVHRMBAf8EBTADAQH/MA0GCSqGSIb3DQEBCwUAA4IBAQBf9SW2JYRq
ccAwo2581cfPe5ULaM9tFARo6qcLujFSN5aA8LmhU4TFVc/v7np/xrJdgmxM+7YL
pjnhKBHleg7uo7nkUsVYsSvj82Cx7EbNrSCY8hxovf8JhiG9m/uMLbvKSrRuVA4k
3bx5K8iKzSvp719aQS9TLZPGlYM28utrMoqI5FzbI1gKdqgI76IxlPFaT/iVkpte
U/icSVAaYyv98WXXN/SNihjwwMPpZL7t1FVUNC1zbpLE0ozZEgQQHjTMyG8u5mn2
o3fopfuVAckEWQu6A8gk0A5yrrFxlwgndJh0LKFRH1v0N5EZqywLFuqwOICyn8Iu
xNDVcc10qA79
-----END CERTIFICATE-----"""
        val payload =
            "WwogeyJhZm5hbWVkYXR1bSI6IjIwMjAtMDYtMTdUMTA6MDA6MDAuMDAwKzAyMDAiLAogICJ1aXRzbGFnZGF0dW0iOiIyMDIwLTA2LTE3VDEwOjEwOjAwLjAwMCswMjAwIiwKICAicmVzdWx0YWF0IjoiTkVHQVRJRUYiLAogICJhZnNwcmFha1N0YXR1cyI6IkFGR0VST05EIiwKICAiYWZzcHJhYWtJZCI6Mjc4NzE3Njh9LAogeyJhZm5hbWVkYXR1bSI6IjIwMjAtMTEtMDhUMTA6MTU6MDAuMDAwKzAxMDAiLAogICAidWl0c2xhZ2RhdHVtIjoiMjAyMC0xMS0wOVQwNzo1MDozOS4wMDArMDEwMCIsCiAgICJyZXN1bHRhYXQiOiJQT1NJVElFRiIsCiAgICJhZnNwcmFha1N0YXR1cyI6IkFGR0VST05EIiwKICAgImFmc3ByYWFrSWQiOjI1ODcxOTcyMTl9Cl0K"
        val signature =
            "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"

        val url = ".coronatester.nl"

        val validator = SignatureValidator.Builder()
            .addTrustedCertificate(cert)
            .cnMatching(url)
            .build()

        validator.verifySignature(
            ByteArrayInputStream(Base64.decode(payload)),
            Base64.decode(
                signature
            )
        )
    }

    @Test
    fun `given a cert with coronatester example nl RDN, then it fails`() {
//        // SubjectDN: C=NL,O=Ministerie van Volksgezondheid\, Welzijn en Sport,OU=Corona Alerters,CN=.coronatester.example.nl
//        Validity
//        Not Before: Aug 25 06:54:14 2021 GMT
//        Not After : Aug 23 06:54:14 2031 GMT
        val cert = """-----BEGIN CERTIFICATE-----
MIIDlTCCAn2gAwIBAgIUdW78RX4CVfVSSWDCeuH4gsfc4mUwDQYJKoZIhvcNAQEL
BQAwWjErMCkGA1UEAwwiU3RhYXQgZGVyIE5lZGVybGFuZGVuIFJvb3QgQ0EgLSBH
MzEeMBwGA1UECgwVU3RhYXQgZGVyIE5lZGVybGFuZGVuMQswCQYDVQQGEwJOTDAe
Fw0yMTA4MjUwNjU0MTRaFw0zMTA4MjMwNjU0MTRaMFoxKzApBgNVBAMMIlN0YWF0
IGRlciBOZWRlcmxhbmRlbiBSb290IENBIC0gRzMxHjAcBgNVBAoMFVN0YWF0IGRl
ciBOZWRlcmxhbmRlbjELMAkGA1UEBhMCTkwwggEiMA0GCSqGSIb3DQEBAQUAA4IB
DwAwggEKAoIBAQDknmEgtaecdfxNA/0EAS6m1UyH2JPcGeXbQKNLNQv3Dm8Larcx
24OwAMR34qSIHsoy0P1bpWYQcpIk6jASVeH21RO7/F0CITZhRTaC+TUUOwFsjgbU
dOsDtSZYFrH/I14V1+iQSgvApho3ITIRU8AmHyMnzIIfAMClk9peDmFjsC81sxBs
yOxA6z6VZiYC4uw8X4vkEDz8J9Ebs2fBBeUfsAwflBG917aQau1J8+uxRSqTIwME
JwjC53v42dIXwzkqoVHTOnHgDbfzS6XQj/xKiUZf7d6pG8dBU+EsSty4/H+4abgq
gTy6x2d2cyQ2484l0bBiUkSQh1Nh8zlVtrATAgMBAAGjUzBRMB0GA1UdDgQWBBRe
tHKrjHDssU5fUcQgTQrwTnXEJzAfBgNVHSMEGDAWgBRetHKrjHDssU5fUcQgTQrw
TnXEJzAPBgNVHRMBAf8EBTADAQH/MA0GCSqGSIb3DQEBCwUAA4IBAQCle1TimSTC
ysA9i+RMOkLxNkdX0SEyYheeFWZDNPm4wsAtyYS2OzlcLT0M23YsaYanNzBdQbOP
aEzlAysiP1v0eQv28fI0GClcsfWEoV9mQMjTDsuQuum7GkiqzXCSVk378VJJ6t9K
ofKcX1EUfCZTk9iUhIaETDQo3sQP1ej+wiW/7P0IMCl/4jZ3RZLlu2QsbIPKskTg
E6WXr7yD7YBBZtVhUnA5QSr46PUlT5fAAE4R6U3B59SPMHgj8Eini4YaiyeYg8bP
tsgI/UdWL5py6YemcgdsMk0OwxP1YcFnsnnmPQKoObj0bWSK4qJjO1SM2PYP1+uD
V+fduXP4fIM0
-----END CERTIFICATE-----
"""
        val payload =
            "WwogeyJhZm5hbWVkYXR1bSI6IjIwMjAtMDYtMTdUMTA6MDA6MDAuMDAwKzAyMDAiLAogICJ1aXRzbGFnZGF0dW0iOiIyMDIwLTA2LTE3VDEwOjEwOjAwLjAwMCswMjAwIiwKICAicmVzdWx0YWF0IjoiTkVHQVRJRUYiLAogICJhZnNwcmFha1N0YXR1cyI6IkFGR0VST05EIiwKICAiYWZzcHJhYWtJZCI6Mjc4NzE3Njh9LAogeyJhZm5hbWVkYXR1bSI6IjIwMjAtMTEtMDhUMTA6MTU6MDAuMDAwKzAxMDAiLAogICAidWl0c2xhZ2RhdHVtIjoiMjAyMC0xMS0wOVQwNzo1MDozOS4wMDArMDEwMCIsCiAgICJyZXN1bHRhYXQiOiJQT1NJVElFRiIsCiAgICJhZnNwcmFha1N0YXR1cyI6IkFGR0VST05EIiwKICAgImFmc3ByYWFrSWQiOjI1ODcxOTcyMTl9Cl0K"
        val signature =
            "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"

        val url = ".coronatester.nl"

        val validator = SignatureValidator.Builder()
            .addTrustedCertificate(cert)
            .cnMatching(url)
            .build()

        val exception = assertThrows(SignatureValidationException::class.java) {
            validator.verifySignature(
                ByteArrayInputStream(Base64.decode(payload)),
                Base64.decode(
                    signature
                )
            )
        }

        assertEquals("Signing certificate does not match expected CN", exception.message)
    }

    @Test
    fun `given a cert with www coronatester nl example com RND then it fails`() {
//        //SubjectDN: C=NL,O=Ministerie van Volksgezondheid\, Welzijn en Sport,OU=Corona Alerters,CN=www.coronatester.nl.example.com
//        Validity
//        Not Before: Aug 25 06:57:38 2021 GMT
//        Not After : Aug 23 06:57:38 2031 GMT
        val cert = """-----BEGIN CERTIFICATE-----
MIIDlTCCAn2gAwIBAgIUYWKoRq1mepgdb2U0K5TS7pjuNAcwDQYJKoZIhvcNAQEL
BQAwWjErMCkGA1UEAwwiU3RhYXQgZGVyIE5lZGVybGFuZGVuIFJvb3QgQ0EgLSBH
MzEeMBwGA1UECgwVU3RhYXQgZGVyIE5lZGVybGFuZGVuMQswCQYDVQQGEwJOTDAe
Fw0yMTA4MjUwNjU3MzhaFw0zMTA4MjMwNjU3MzhaMFoxKzApBgNVBAMMIlN0YWF0
IGRlciBOZWRlcmxhbmRlbiBSb290IENBIC0gRzMxHjAcBgNVBAoMFVN0YWF0IGRl
ciBOZWRlcmxhbmRlbjELMAkGA1UEBhMCTkwwggEiMA0GCSqGSIb3DQEBAQUAA4IB
DwAwggEKAoIBAQDV8Ks8O/PMCgYLLkPaW4ayi4e22Bj33RPD8d9bLbo8CDXPCpJ4
1FKJVSQ+LdjxOgsy5dIm5d1PaCqxz1EYKk8G9WcLkM4CsEb6LI1AMwspLxwHlKP9
zpUnpEHixhdVYP3yX5MK7pnf2IDrRX8GJu36zf/Tf9UomhQ5a+tAW/ITqnlNTkzR
KeiP+lqN7g3f/vhSsumpukC6mckyblyMdDhxMvv08EJMramfSl+Yerj5GSgAnr9d
cLeBrF7DYvY8kAvI5SRbHwlfKvD+1W3KrflCT7XUeFXwrlBZJIvalUTtvcfQrNbK
ea28yGc09Y+d2+vbl3H5u6Q0GoiR2ML31wApAgMBAAGjUzBRMB0GA1UdDgQWBBSu
cbeAoObwDJKLKHYefukaw56n7TAfBgNVHSMEGDAWgBSucbeAoObwDJKLKHYefuka
w56n7TAPBgNVHRMBAf8EBTADAQH/MA0GCSqGSIb3DQEBCwUAA4IBAQAafl6VZCy0
FiGxLZnXfq7dDbV1PTmmeYmTRpxvxgv5zoTuf4puuLkrxLjzxJOLJbxpvbQTixjt
vZBimqqseWWT0ICc3EVgeB/OYRGAk2VUE+eok4nN7GjwlvZowieq1ZyVLPE8dxwD
ef7v6JPoCR847AX7uYqO2cCuVnz/vzQFuZ/E6yhkN/kbevEJhQVZmRfpNM9GmJdl
GAHFz2qzcPZnZw2KCCSGTyLSqVTMJHr88DGBUMa4hVxJvOTQlLohKb6lXggdooFH
C02VHM3PPAv0NvPBvWaWs3eicrNubxDBHxO120GTp8tb6X2tdm239bV8Y58XTn3X
vr/lblJEVYse
-----END CERTIFICATE-----
"""
        val payload =
            "WwogeyJhZm5hbWVkYXR1bSI6IjIwMjAtMDYtMTdUMTA6MDA6MDAuMDAwKzAyMDAiLAogICJ1aXRzbGFnZGF0dW0iOiIyMDIwLTA2LTE3VDEwOjEwOjAwLjAwMCswMjAwIiwKICAicmVzdWx0YWF0IjoiTkVHQVRJRUYiLAogICJhZnNwcmFha1N0YXR1cyI6IkFGR0VST05EIiwKICAiYWZzcHJhYWtJZCI6Mjc4NzE3Njh9LAogeyJhZm5hbWVkYXR1bSI6IjIwMjAtMTEtMDhUMTA6MTU6MDAuMDAwKzAxMDAiLAogICAidWl0c2xhZ2RhdHVtIjoiMjAyMC0xMS0wOVQwNzo1MDozOS4wMDArMDEwMCIsCiAgICJyZXN1bHRhYXQiOiJQT1NJVElFRiIsCiAgICJhZnNwcmFha1N0YXR1cyI6IkFGR0VST05EIiwKICAgImFmc3ByYWFrSWQiOjI1ODcxOTcyMTl9Cl0K"
        val signature =
            "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"

        val url = ".coronatester.nl"

        val validator = SignatureValidator.Builder()
            .addTrustedCertificate(cert)
            .cnMatching(url)
            .build()

        val signatureValidationException = assertThrows(
            SignatureValidationException::class.java
        ) {
            validator.verifySignature(
                ByteArrayInputStream(Base64.decode(payload)),
                Base64.decode(
                    signature
                )
            )
        }

        assertEquals(
            "Signing certificate does not match expected CN",
            signatureValidationException.message
        )
    }

    @Test
    fun `does not validate expired certificate`() {
        // certificate expiring at Fri Aug 13 11:53:04
        val cert = """-----BEGIN CERTIFICATE-----
MIIDhzCCAm+gAwIBAgIJAM2WaDmIAyrnMA0GCSqGSIb3DQEBCwUAMFoxKzApBgNV
BAMMIlN0YWF0IGRlciBOZWRlcmxhbmRlbiBSb290IENBIC0gRzMxHjAcBgNVBAoM
FVN0YWF0IGRlciBOZWRlcmxhbmRlbjELMAkGA1UEBhMCTkwwHhcNMjEwNzE0MDg1
MzA0WhcNMjEwODEzMDg1MzA0WjBaMSswKQYDVQQDDCJTdGFhdCBkZXIgTmVkZXJs
YW5kZW4gUm9vdCBDQSAtIEczMR4wHAYDVQQKDBVTdGFhdCBkZXIgTmVkZXJsYW5k
ZW4xCzAJBgNVBAYTAk5MMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA
pgxJTobvN/4Ej+kt7TtIXeCf0RMk8MhuEwkCteqSwuxSIYKUwPZKASxrys3LQLhQ
AiaIPlxduWFeVytP3MUkhhnUGgJqr/BueSSMmvC2J7KkSZVovlVYw6EYZNybkd42
F4n5IfnEQtefJhh1Y01jX22UwlbKe8E3VR+9fiiLYy+tIipZYebCoNkqzT2mBdBk
MxXU/K74yS65m4oFL/8nDuGtcajIzxNjIWL1xU/4wMITgoe51cxBraLwxrE2ff6K
pMJdu5r4PAmxKPGp+v8YZuqnfG+RR1O8CqJAzkwqx7IDT0Nq/B8e7R7xiX5KyWVp
leYLpvI/P9+EGexci1J7HQIDAQABo1AwTjAdBgNVHQ4EFgQUYH0l6u3dWF2T22MW
ve4VSXRi1lYwHwYDVR0jBBgwFoAUYH0l6u3dWF2T22MWve4VSXRi1lYwDAYDVR0T
BAUwAwEB/zANBgkqhkiG9w0BAQsFAAOCAQEAlCTr4O/tX+5JQD+q/W6DA0vDjSze
RaJqrfi4xlkTTQzDb76PP9GjHJ8hA1qNmKX/K1l4QBJhNjKTj4Piz8vYr539kanB
rQGV1xGB4Znl+YK8vE7oyelPOTkeAiduPGFVfp58z69uYY+vJ9aHQpj0uq0PELeB
bPtLgFso/pE8Uu57NH4LhngUGmyZI5epLKI6H/M38ll9JgIg+nL0O1jtXLaJpDnz
smRx6Pbf73XsL5KmLMshilVBGiZr+QKReDvZq8xLq66LJOFw7t8GOpRqdAYPC4mG
LhA3gg89xrq8bA3XlMOXEpHzX29xu1ODoCZ+GNqlqK/UrWb3TdFGtwI+/Q==
-----END CERTIFICATE-----"""
        val payload =
            "WwogeyJhZm5hbWVkYXR1bSI6IjIwMjAtMDYtMTdUMTA6MDA6MDAuMDAwKzAyMDAiLAogICJ1aXRzbGFnZGF0dW0iOiIyMDIwLTA2LTE3VDEwOjEwOjAwLjAwMCswMjAwIiwKICAicmVzdWx0YWF0IjoiTkVHQVRJRUYiLAogICJhZnNwcmFha1N0YXR1cyI6IkFGR0VST05EIiwKICAiYWZzcHJhYWtJZCI6Mjc4NzE3Njh9LAogeyJhZm5hbWVkYXR1bSI6IjIwMjAtMTEtMDhUMTA6MTU6MDAuMDAwKzAxMDAiLAogICAidWl0c2xhZ2RhdHVtIjoiMjAyMC0xMS0wOVQwNzo1MDozOS4wMDArMDEwMCIsCiAgICJyZXN1bHRhYXQiOiJQT1NJVElFRiIsCiAgICJhZnNwcmFha1N0YXR1cyI6IkFGR0VST05EIiwKICAgImFmc3ByYWFrSWQiOjI1ODcxOTcyMTl9Cl0K"
        val signature =
            "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"

        val validator = SignatureValidator.Builder()
            .signingCertificateBytes(listOf(cert.toByteArray()))
            .build()

        val signatureValidationException = assertThrows(
            SignatureValidationException::class.java
        ) {
            validator.verifySignature(
                ByteArrayInputStream(Base64.decode(payload)),
                Base64.decode(
                    signature
                ),
                Clock.fixed(Instant.parse("2021-08-25T00:00:00.00Z"), ZoneId.of("UTC"))
            )
        }

        assertEquals("Expired certificate", signatureValidationException.message)
    }
}
