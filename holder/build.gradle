plugins {
    alias(libs.plugins.android.application)
    alias(libs.plugins.kotlin.android)
    alias(libs.plugins.navigation.safeargs.kotlin)
    alias(libs.plugins.kotlin.parcelize)
    alias(libs.plugins.shot)
    alias(libs.plugins.ksp)
}

def appVersionCode = 1000000
if (System.getenv("GITHUB_REPOSITORY_OWNER") == "minvws") {
    appVersionCode = System.getenv("VERSION_NUMBER") != null ? System.getenv("VERSION_NUMBER").toInteger() : 1000000
}
version = "5.0.1"
archivesBaseName = "holder-v${version}-${appVersionCode}"

android {
    namespace 'nl.rijksoverheid.ctr.holder'
    testOptions {
        animationsDisabled = true
        execution 'ANDROIDX_TEST_ORCHESTRATOR'
        unitTests {
            includeAndroidResources = true
            unitTests.all {
                jvmArgs '-Xmx2g'
            }
        }
    }

    sourceSets {
        debug {
            // for testing Room migrations, see https://github.com/robolectric/robolectric/issues/3928#issuecomment-395309991
            assets.srcDirs += files("$projectDir/schemas".toString())
        }
    }

    buildFeatures {
        viewBinding true
    }

    defaultConfig {
        applicationId "nl.rijksoverheid.ctr.holder"
        versionCode appVersionCode
        versionName version
        vectorDrawables.useSupportLibrary = true

        testInstrumentationRunner "com.karumi.shot.ShotTestRunner"
        testInstrumentationRunnerArguments clearPackageData: 'true'

        manifestPlaceholders = [appLabel: "@string/app_name", deepLinkHost: "coronacheck.nl", digidSchema: "coronacheck"]
    }

    signingConfigs {
        release {
            storeFile file('../keystore.jks')
            storePassword System.getenv("KEYSTORE_PASSWORD")
            keyAlias System.getenv("KEYSTORE_KEY_ALIAS")
            keyPassword System.getenv("KEYSTORE_KEY_PASSWORD")
        }
    }

    flavorDimensions "environment"
    productFlavors {
        acc {
            dimension "environment"
            versionNameSuffix "-acc"
            applicationIdSuffix ".acc"
            manifestPlaceholders = [appLabel: "@string/app_name_acc", deepLinkHost: "web.acc.coronacheck.nl", digidSchema: "coronacheck-acc"]
            apply plugin: 'com.google.gms.google-services'
            apply plugin: 'com.google.firebase.crashlytics'
            matchingFallbacks = ['mlkit']
        }
        fdroidAcc {
            dimension "environment"
            versionNameSuffix "-fdroid"
            applicationIdSuffix ".fdroid.acc"
            manifestPlaceholders = [appLabel: "@string/app_name_acc", deepLinkHost: "web.acc.coronacheck.nl", digidSchema: "coronacheck-acc"]
            apply plugin: 'com.google.gms.google-services'
            apply plugin: 'com.google.firebase.crashlytics'
            matchingFallbacks = ['zxing']
        }
        prod {
            dimension "environment"
            matchingFallbacks = ['mlkit']
        }
        fdroidProd {
            buildConfigField "String", "OPEN_ID_REDIRECT_URL", "\"coronacheck://auth/login\""
            dimension "environment"
            matchingFallbacks = ['zxing']
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            productFlavors.acc.signingConfig signingConfigs.release
            productFlavors.prod.signingConfig signingConfigs.release
        }
    }

    compileOptions {
        coreLibraryDesugaringEnabled true
    }

    ksp {
        arg("room.schemaLocation", "$projectDir/schemas")
    }

    kotlin {
        sourceSets {
            main.kotlin.srcDirs += 'build/generated/ksp/main/kotlin'
            test.kotlin.srcDirs += 'build/generated/ksp/test/kotlin'
        }
    }

    packagingOptions {
        exclude "META-INF/LICENSE**"
        pickFirst "MANIFEST.MF"
    }

    shot {
        // screenshots generated with arm emulators locally are not identical to x86
        // emulator ones from the CI (github does not support yet apple silicon runners)
        tolerance = 0.5
    }
}

dependencies {
    implementation project(":shared")
    implementation project(":appconfig")
    implementation project(":design")

    implementation libs.bundles.groupie
    implementation libs.navigation.fragment
    implementation libs.navigation.ui
    implementation libs.koin.android
    implementation libs.androidx.preference
    implementation libs.constraintlayout
    implementation libs.timber
    implementation libs.lottie
    debugImplementation libs.fragment.testing
    debugImplementation libs.androidx.test.monitor
    implementation(platform(libs.okhttp.bom))
    implementation libs.okhttp.logging.interceptor
    implementation libs.okhttp
    implementation libs.okhttp.tls
    implementation libs.retrofit.moshi
    implementation libs.androidx.security.crypto
    implementation libs.rootbeer
    implementation libs.room.runtime
    implementation libs.room
    ksp libs.room.compiler
    implementation libs.sqlcipher
    implementation libs.work.runtime
    implementation libs.moshi.adapters

    testImplementation libs.junit
    testImplementation libs.mockk
    androidTestImplementation libs.mockk.android
    testImplementation libs.koin.test.junit4
    testImplementation libs.robolectric
    testImplementation libs.androidx.test.runner
    testImplementation libs.okhttp.mockWebServer
    testImplementation(libs.barista) {
        exclude group: "org.jetbrains.kotlin"
    }
    testImplementation libs.navigation.testing
    testImplementation libs.coroutines.android
    testImplementation libs.room.testing
    testImplementation libs.work.testing
    testImplementation libs.coroutines.test
    testImplementation libs.androidx.core.testing
    testImplementation libs.espresso.core

    coreLibraryDesugaring libs.desugar

    accImplementation libs.crashlytics

    androidTestImplementation libs.androidx.test.junit
    androidTestImplementation libs.androidx.test.runner
    androidTestImplementation libs.androidx.test.rules
    androidTestImplementation libs.androidx.test.core
    androidTestImplementation libs.androidx.core.testing
    androidTestImplementation libs.uiautomator
    androidTestImplementation libs.koin.test.junit4
    androidTestImplementation(libs.barista) {
        exclude group: "org.jetbrains.kotlin"
    }

    androidTestUtil libs.androidx.test.orchestrator

    ksp libs.moshi.codegen
}
