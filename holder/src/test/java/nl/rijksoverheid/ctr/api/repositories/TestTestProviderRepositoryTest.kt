/*
 * Copyright (c) 2021 De Staat der Nederlanden, Ministerie van Volksgezondheid, Welzijn en Sport.
 * Licensed under the EUROPEAN UNION PUBLIC LICENCE v. 1.2
 *
 * SPDX-License-Identifier: EUPL-1.2
 */

package nl.rijksoverheid.ctr.api.repositories

import io.mockk.InternalPlatformDsl.toStr
import kotlinx.coroutines.runBlocking
import nl.rijksoverheid.ctr.api.apiModule
import nl.rijksoverheid.ctr.holder.api.repositories.TestProviderRepository
import nl.rijksoverheid.ctr.shared.models.NetworkRequestResult
import okhttp3.mockwebserver.MockResponse
import okhttp3.mockwebserver.MockWebServer
import org.junit.After
import org.junit.Assert.assertTrue
import org.junit.Test
import org.junit.runner.RunWith
import org.koin.core.context.loadKoinModules
import org.koin.test.AutoCloseKoinTest
import org.koin.test.get
import org.robolectric.RobolectricTestRunner

/*
 *  Copyright (c) 2021 De Staat der Nederlanden, Ministerie van Volksgezondheid, Welzijn en Sport.
 *   Licensed under the EUROPEAN UNION PUBLIC LICENCE v. 1.2
 *
 *   SPDX-License-Identifier: EUPL-1.2
 *
 */
@RunWith(RobolectricTestRunner::class)
class TestTestProviderRepositoryTest : AutoCloseKoinTest() {

    private lateinit var mockWebServer: MockWebServer
    private val certificate = """
        -----BEGIN CERTIFICATE-----
        MIIHnzCCBYegAwIBAgIUBrNeZgcQxfa9Uep4TrZSj6jIUNAwDQYJKoZIhvcNAQEL
        BQAwSTELMAkGA1UEBhMCTkwxETAPBgNVBAoMCEtQTiBCLlYuMScwJQYDVQQDDB5L
        UE4gUEtJb3ZlcmhlaWQgU2VydmVyIENBIDIwMjAwHhcNMjEwMTE0MTUwMTIxWhcN
        MjIwMTE0MTUwMTIxWjCBgzELMAkGA1UEBhMCTkwxFjAUBgNVBAcMDSdzLUdyYXZl
        bmhhZ2UxOTA3BgNVBAoMME1pbmlzdGVyaWUgdmFuIFZvbGtzZ2V6b25kaGVpZCwg
        V2VsemlqbiBlbiBTcG9ydDEhMB8GA1UEAwwYYXBpLXRlc3QuY29yb25hdGVzdGVy
        Lm5sMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA6AUUdKlhzNhDgf9+
        Z2X7Z83f0rnrMTIHpN4RIXeEzF7azTkZT+QeNBzbTDTc++6JY7Q1Zji+NFnK/gbf
        rVDnAdtwhKq74/mBhXgET5gb2x0MESiT2m3dHY8Oz3KBOB8afZQxxbknAblg8PkG
        zb9X/jlXlfEX6ThBFB9l/7OZQw8knD07A9eglljdgeCBPALt3YdbaqfPbgvuFfj/
        wh4YgQqsvF0clNE7zoKnjqu99vMME1jfgzgAdl0iV1SA4Src0Pu8F+EPfZKdPNrQ
        OAWlpwIzhaIYxEDBwaI3UmW+styjVCjbo8Xw9gc7u0839AaqRQPFJVrT8c3BYjNh
        FEaIqwIDAQABo4IDQjCCAz4wDAYDVR0TAQH/BAIwADAfBgNVHSMEGDAWgBQISqq7
        mSRvvlsH8aWKmVstR++5PDCBiQYIKwYBBQUHAQEEfTB7ME0GCCsGAQUFBzAChkFo
        dHRwOi8vY2VydC5tYW5hZ2VkcGtpLmNvbS9DQWNlcnRzL0tQTlBLSW92ZXJoZWlk
        U2VydmVyQ0EyMDIwLmNlcjAqBggrBgEFBQcwAYYeaHR0cDovL29jc3AyMDIwLm1h
        bmFnZWRwa2kuY29tMCMGA1UdEQQcMBqCGGFwaS10ZXN0LmNvcm9uYXRlc3Rlci5u
        bDCBsQYDVR0gBIGpMIGmMAgGBmeBDAECAjCBmQYKYIQQAYdrAQIFCTCBijA3Bggr
        BgEFBQcCARYraHR0cHM6Ly9jZXJ0aWZpY2FhdC5rcG4uY29tL3BraW92ZXJoZWlk
        L2NwczBPBggrBgEFBQcCAjBDDEFPcCBkaXQgY2VydGlmaWNhYXQgaXMgaGV0IENQ
        UyBQS0lvdmVyaGVpZCB2YW4gS1BOIHZhbiB0b2VwYXNzaW5nLjAdBgNVHSUEFjAU
        BggrBgEFBQcDAgYIKwYBBQUHAwEwUwYDVR0fBEwwSjBIoEagRIZCaHR0cDovL2Ny
        bC5tYW5hZ2VkcGtpLmNvbS9LUE5QS0lvdmVyaGVpZFNlcnZlckNBMjAyMC9MYXRl
        c3RDUkwuY3JsMB0GA1UdDgQWBBTGSZR6oNj83a9JVM4GgCo4yZ3OqzAOBgNVHQ8B
        Af8EBAMCBaAwggEDBgorBgEEAdZ5AgQCBIH0BIHxAO8AdgBGpVXrdfqRIDC1oolp
        9PN9ESxBdL79SbiFq/L8cP5tRwAAAXcBamNgAAAEAwBHMEUCIQCcY1ViMuUOZ3EG
        IufMmxyv3Sx8u0Yrh6fW1ooVC+TdpgIgXjea7UJkNgZHmzCRuKYNVuoGvz+VE28h
        v4xw1QwUjzgAdQBvU3asMfAxGdiZAKRRFf93FRwR2QLBACkGjbIImjfZEwAAAXcB
        amNpAAAEAwBGMEQCID68IzzeHTjzQWqKVWU8Csn7vpdMV1cz5dDWMezANpFzAiBH
        IRnRJLPuxMVRi6F19gGfIdZGsEh6n4sOtiiv/2ZOjzANBgkqhkiG9w0BAQsFAAOC
        AgEAOmm9yZro8CWTmcETlyBqcDFCK80RZLjvuB0kCRMEkkAS2ysTl9Hix/3N7eqX
        IQcDXUIeyHl9aTMnvB/gQ9aph+g3FCRjdoRsPZ3Fk0DGYeWMGacP/PaHnL9N9ewG
        0frKZv9LjIGi2ChcNMzYGaPexgJd+0daO41lzuSZtyZIGpJvTzcy9s5FQZK9ift0
        dGeOYRk1hTfy+ItKYqM0exupwLYYv+8zda/JXNNZzDvhPFuJgVVXzu1ZXmM43Qz/
        2mvrzgz+apZgC9SFzmDa+0lRHz4NCpe5rInqqdM+FZMR/Rl7bQfkxNps1WV2Y0iS
        BQsCOeTnjx4g25+nIFAuhksC8CLCbQXMM28iW62dqUhJSggWZxdHZlsBVVqB9a8Y
        lUpwrf6pCiaP5U3jmijUj1WgcuzY2r0Y3t939jOP7wX1joYrmEiYnoi7N3COBNfI
        GQ2UamFOnE0Te7SN9ijUDTVmSgafuwQXkWxw2keAFSjmQU2DTLZRYQBSk/43xSr/
        AK2XuDPI8ljgSroK8wqPKIj9XQk3ImTg8BdeXuYogyFZ7NjYlvRoKCsLkyhbTtXI
        SgVcLaaRgiP3XMxLsiO7VNvHcQkNRDsG9qYoFj8MNEBOjLS0YFzArZwzzafhlJkB
        PyNtEVGWNirrnZJImjooTsZSTgr5XPNUk01sTZI+T1bG1uo=
        -----END CERTIFICATE-----
    """.trimIndent()

    @After
    fun tearDown() {
        mockWebServer.shutdown()
    }

    @Test
    fun `remoteTestResult returns RemoteTestResult when 200`() = runBlocking {
        mockWebServer = MockWebServer()
        mockWebServer.enqueue(
            MockResponse()
                .setResponseCode(200)
                .setBody(
                    "{\"payload\":\"ewogICAgInByb3RvY29sVmVyc2lvbiI6ICIzLjAiLAogICAgInByb3ZpZGVySWRlbnRpZmllciI6ICJaWloiLAogICAgInN0YXR1cyI6ICJjb21wbGV0ZSIsCiAgICAiaG9sZGVyIjogewogICAgICAgICJmaXJzdE5hbWUiOiAiQm9iIiwKICAgICAgICAibGFzdE5hbWUiOiAiQm91d2VyIiwKICAgICAgICAiaW5maXgiOiAiZGUiLAogICAgICAgICJiaXJ0aERhdGUiOiAiMTk5Mi0wNS0yNiIKICAgIH0sCiAgICAiZXZlbnRzIjogWwogICAgICAgIHsKICAgICAgICAgICAgInR5cGUiOiAibmVnYXRpdmV0ZXN0IiwKICAgICAgICAgICAgInVuaXF1ZSI6ICJmM2QxNThkZGM5MDA3NDk3YmEwMTllODAxMzUwMzY3NjZlMDhjZjQzIiwKICAgICAgICAgICAgImlzU3BlY2ltZW4iOiB0cnVlLAogICAgICAgICAgICAibmVnYXRpdmV0ZXN0IjogewogICAgICAgICAgICAgICAgInNhbXBsZURhdGUiOiAiMjAyMi0wNS0xOVQwMjo0NzowMFoiLAogICAgICAgICAgICAgICAgIm5lZ2F0aXZlUmVzdWx0IjogdHJ1ZSwKICAgICAgICAgICAgICAgICJmYWNpbGl0eSI6ICJZZWxsb3cgQmFuYW5hIFRlc3QgQ2VudGVyIiwKICAgICAgICAgICAgICAgICJzYW1wbGVNZXRob2QiOiBudWxsLAogICAgICAgICAgICAgICAgInR5cGUiOiAiTkw6QUdPQiIsCiAgICAgICAgICAgICAgICAibmFtZSI6ICIiLAogICAgICAgICAgICAgICAgIm1hbnVmYWN0dXJlciI6ICIiCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICBdCn0\",\"signature\":\"\"}"
                )
        )

        loadKoinModules(
            apiModule(mockWebServer.url("/"), "", false, false)
        )

        val testProviderRepository: TestProviderRepository = get()

        val model = testProviderRepository.remoteTestResult(
            url = mockWebServer.url("/").toStr(),
            token = "",
            verifierCode = "",
            provider = "",
            signingCertificateBytes = listOf(certificate.toByteArray()),
            tlsCertificateBytes = listOf(certificate.toByteArray())
        )
        println(model)
        assertTrue(model is NetworkRequestResult.Success)
    }

    @Test
    fun `remoteTestResult returns Success when 401`() = runBlocking {
        mockWebServer = MockWebServer()
        mockWebServer.enqueue(
            MockResponse()
                .setResponseCode(401)
                .setBody(
                    "{\"payload\":\"ewogICAgInByb3RvY29sVmVyc2lvbiI6ICIzLjAiLAogICAgInByb3ZpZGVySWRlbnRpZmllciI6ICJaWloiLAogICAgInN0YXR1cyI6ICJjb21wbGV0ZSIsCiAgICAiaG9sZGVyIjogewogICAgICAgICJmaXJzdE5hbWUiOiAiQm9iIiwKICAgICAgICAibGFzdE5hbWUiOiAiQm91d2VyIiwKICAgICAgICAiaW5maXgiOiAiZGUiLAogICAgICAgICJiaXJ0aERhdGUiOiAiMTk5Mi0wNS0yNiIKICAgIH0sCiAgICAiZXZlbnRzIjogWwogICAgICAgIHsKICAgICAgICAgICAgInR5cGUiOiAibmVnYXRpdmV0ZXN0IiwKICAgICAgICAgICAgInVuaXF1ZSI6ICJmM2QxNThkZGM5MDA3NDk3YmEwMTllODAxMzUwMzY3NjZlMDhjZjQzIiwKICAgICAgICAgICAgImlzU3BlY2ltZW4iOiB0cnVlLAogICAgICAgICAgICAibmVnYXRpdmV0ZXN0IjogewogICAgICAgICAgICAgICAgInNhbXBsZURhdGUiOiAiMjAyMi0wNS0xOVQwMjo0NzowMFoiLAogICAgICAgICAgICAgICAgIm5lZ2F0aXZlUmVzdWx0IjogdHJ1ZSwKICAgICAgICAgICAgICAgICJmYWNpbGl0eSI6ICJZZWxsb3cgQmFuYW5hIFRlc3QgQ2VudGVyIiwKICAgICAgICAgICAgICAgICJzYW1wbGVNZXRob2QiOiBudWxsLAogICAgICAgICAgICAgICAgInR5cGUiOiAiTkw6QUdPQiIsCiAgICAgICAgICAgICAgICAibmFtZSI6ICIiLAogICAgICAgICAgICAgICAgIm1hbnVmYWN0dXJlciI6ICIiCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICBdCn0\",\"signature\":\"\"}"
                )
        )

        loadKoinModules(
            apiModule(mockWebServer.url("/"), "", false, false)
        )

        val testProviderRepository: TestProviderRepository = get()

        val model = testProviderRepository.remoteTestResult(
            url = mockWebServer.url("/").toStr(),
            token = "",
            verifierCode = "",
            provider = "",
            signingCertificateBytes = listOf(certificate.toByteArray()),
            tlsCertificateBytes = listOf(certificate.toByteArray())
        )
        println(model)
        assertTrue(model is NetworkRequestResult.Success)
    }

    @Test
    fun `remoteTestResult throws Failed when request fails and no error body`() {
        runBlocking {
            mockWebServer = MockWebServer()
            mockWebServer.enqueue(
                MockResponse()
                    .setResponseCode(401)
            )

            loadKoinModules(
                apiModule(mockWebServer.url("/"), "", false, false)
            )

            val testProviderRepository: TestProviderRepository = get()

            val model = testProviderRepository.remoteTestResult(
                url = mockWebServer.url("/").toStr(),
                token = "",
                verifierCode = "",
                provider = "",
                signingCertificateBytes = listOf(certificate.toByteArray()),
                tlsCertificateBytes = listOf(certificate.toByteArray())
            )

            assertTrue(model is NetworkRequestResult.Failed)
        }
    }

    @Test
    fun `remoteTestResult returns Failed when request fails`() {
        runBlocking {
            mockWebServer = MockWebServer()
            mockWebServer.enqueue(
                MockResponse()
                    .setResponseCode(400)
                    .setBody(
                        "{\"payload\":\"eyJwcm90b2NvbFZlcnNpb24iOiIxLjAiLCJwcm92aWRlcklkZW50aWZpZXIiOiJCUkIiLCJzdGF0dXMiOiJjb21wbGV0ZSIsInJlc3VsdCI6eyJ1bmlxdWUiOiI0YjIzZTJiY2I3ODMyN2Y3NjBlOWI4NWZhN2QxYTRkMzZmOTEwMjEzIiwic2FtcGxlRGF0ZSI6IjIwMjEtMDItMjNUMDY6MDE6MDErMDA6MDAiLCJ0ZXN0VHlwZSI6Ijc3NWNhYTIxNDkiLCJuZWdhdGl2ZVJlc3VsdCI6dHJ1ZSwiY2hlY2tzdW0iOjMwfX0=\",\"signature\":\"\"}"
                    )
            )

            loadKoinModules(
                apiModule(mockWebServer.url("/"), "", false, false)
            )

            val testProviderRepository: TestProviderRepository = get()

            val model = testProviderRepository.remoteTestResult(
                url = mockWebServer.url("/").toStr(),
                token = "",
                verifierCode = "",
                provider = "",
                signingCertificateBytes = listOf(certificate.toByteArray()),
                tlsCertificateBytes = listOf(certificate.toByteArray())
            )

            assertTrue(model is NetworkRequestResult.Failed)
        }
    }
}
