package nl.rijksoverheid.ctr.holder.data_migration

import com.squareup.moshi.Moshi
import com.squareup.moshi.adapters.PolymorphicJsonAdapterFactory
import com.squareup.moshi.kotlin.reflect.KotlinJsonAdapterFactory
import io.mockk.every
import io.mockk.mockk
import kotlin.test.assertNotNull
import nl.rijksoverheid.ctr.api.json.Base64JsonAdapter
import nl.rijksoverheid.ctr.api.json.JsonObjectJsonAdapter
import nl.rijksoverheid.ctr.api.json.LocalDateJsonAdapter
import nl.rijksoverheid.ctr.api.json.OffsetDateTimeJsonAdapter
import nl.rijksoverheid.ctr.holder.api.OriginTypeJsonAdapter
import nl.rijksoverheid.ctr.holder.api.RemoteCouplingStatusJsonAdapter
import nl.rijksoverheid.ctr.holder.api.RemoteTestStatusJsonAdapter
import nl.rijksoverheid.ctr.holder.get_events.models.RemoteEvent
import nl.rijksoverheid.ctr.holder.paper_proof.usecases.GetEventsFromPaperProofQrUseCase
import org.junit.Test
import org.junit.runner.RunWith
import org.koin.test.AutoCloseKoinTest
import org.robolectric.RobolectricTestRunner

@RunWith(RobolectricTestRunner::class)
class DataMigrationPayloadUseCaseImplTest : AutoCloseKoinTest() {
    private val moshi = Moshi.Builder()
        .add(Base64JsonAdapter())
        .add(JsonObjectJsonAdapter())
        .add(OffsetDateTimeJsonAdapter())
        .add(LocalDateJsonAdapter())
        .add(RemoteTestStatusJsonAdapter())
        .add(OriginTypeJsonAdapter())
        .add(RemoteCouplingStatusJsonAdapter())
        .add(
            PolymorphicJsonAdapterFactory.of(
                RemoteEvent::class.java, "type"
            )
                .withSubtype(RemoteEvent.getRemoteEventClassFromType(RemoteEvent.TYPE_POSITIVE_TEST), RemoteEvent.TYPE_POSITIVE_TEST)
                .withSubtype(RemoteEvent.getRemoteEventClassFromType(RemoteEvent.TYPE_RECOVERY), RemoteEvent.TYPE_RECOVERY)
                .withSubtype(RemoteEvent.getRemoteEventClassFromType(RemoteEvent.TYPE_NEGATIVE_TEST), RemoteEvent.TYPE_NEGATIVE_TEST)
                .withSubtype(RemoteEvent.getRemoteEventClassFromType(RemoteEvent.TYPE_VACCINATION), RemoteEvent.TYPE_VACCINATION)
        )
        .add(KotlinJsonAdapterFactory())
        .build()

    private val getEventsFromPaperProofQrUseCase = mockk<GetEventsFromPaperProofQrUseCase>()
    private val dataMigrationPayloadUseCase = DataMigrationPayloadUseCaseImpl(moshi, getEventsFromPaperProofQrUseCase)

    @Test
    fun `get remoteprotocol from non dcc payload`() {
        val jsonData =
            "{\"payload\":\"eyJwcm90b2NvbFZlcnNpb24iOiIzLjAiLCJwcm92aWRlcklkZW50aWZpZXIiOiJaWloiLCJzdGF0dXMiOiJjb21wbGV0ZSIsImhvbGRlciI6eyJmaXJzdE5hbWUiOiJDb3JyaWUiLCJpbmZpeCI6InZhbiIsImxhc3ROYW1lIjoiR2VlciIsImJpcnRoRGF0ZSI6IjE5NjAtMDEtMDEifSwiZXZlbnRzIjpbeyJ0eXBlIjoicG9zaXRpdmV0ZXN0IiwidW5pcXVlIjoiZGRmNDMyYTMtNTQ2OC00ODBiLThlYWYtNzg3NDFiMWE4OTYyIiwiaXNTcGVjaW1lbiI6dHJ1ZSwicG9zaXRpdmV0ZXN0Ijp7InNhbXBsZURhdGUiOiIyMDIzLTAzLTI1VDEwOjAxWiIsInBvc2l0aXZlUmVzdWx0Ijp0cnVlLCJmYWNpbGl0eSI6IkdHRCBYTCBBbXN0ZXJkYW0iLCJ0eXBlIjoiTFA2NDY0LTQiLCJuYW1lIjoiUENSIE5hbWUiLCJtYW51ZmFjdHVyZXIiOiJQQ1IgTWFudWZhY3R1cmVyIiwiY291bnRyeSI6Ik5MIn19XX0=\",\"signature\":\"\"}"

        val remoteProtocol = dataMigrationPayloadUseCase.parsePayload(jsonData.toByteArray())

        assertNotNull(remoteProtocol)
    }

    @Test
    fun `get remoteprotocol from dcc payload`() {
        val jsonData =
            "{\"couplingCode\":\"ZKGBKH\",\"credential\":\"HC1:NCFC20490T9WTWGVLKS79 1VYLTXZM8AVX*4FBBU42*70J+9DN03E54F3/Y1LOCY50.FK8ZKO/EZKEZ967L6C56GVC*JC1A6C%63W5Y96746TPCBEC7ZKW.CC9DCECS34\$ CXKEW.CAWEV+A3+9K09GY8 JC2/DSN83LEQEDMPCG/DY-CB1A5IAVY87:EDOL9WEQDD+Q6TW6FA7C466KCN9E%961A6DL6FA7D46.JCP9EJY8L/5M/5546.96VF6.JCBECB1A-:8\$966469L6OF6VX6FVCPD0KQEPD0LVC6JD846Y96*963W5.A6UPCBJCOT9+EDL8FHZ95/D QEALEN44:+C%69AECAWE:34: CJ.CZKE9440/D+34S9E5LEWJC0FD3%4AIA%G7ZM81G72A6J+9SG77N91R6E+9LCBMIBQCAYM8UIB51A9Y9AF6WA6I4817S6ZKH/C3*F*\$GR4N2+5F8FM B\$W6KU91A9WTO8S1QK87DBBMHDKFT*UMNCI3V\$LS.QFWMF18W6TH5\$9W+4QZLU71.5DB73000FGWU/0CRF\"}"
        every { getEventsFromPaperProofQrUseCase.get(any()) } returns mockk()

        val remoteProtocol = dataMigrationPayloadUseCase.parsePayload(jsonData.toByteArray())

        assertNotNull(remoteProtocol)
    }
}
