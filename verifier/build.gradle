plugins {
    alias(libs.plugins.android.application)
    alias(libs.plugins.kotlin.android)
    alias(libs.plugins.ksp)
    alias(libs.plugins.navigation.safeargs.kotlin)
    alias(libs.plugins.kotlin.parcelize)
}

def appVersionCode =  1000000
if (System.getenv("GITHUB_REPOSITORY_OWNER") == "minvws") {
    appVersionCode = System.getenv("GITHUB_RUN_NUMBER") != null ? System.getenv("GITHUB_RUN_NUMBER").toInteger() : 1000000
}
version = "3.0.2"
archivesBaseName = "verifier-v${version}-${appVersionCode}"

android {
    namespace 'nl.rijksoverheid.ctr.verifier'
    testOptions {
        unitTests {
            includeAndroidResources = true
            unitTests.all {
                jvmArgs '-Xmx2g'
            }
        }
    }

    buildFeatures {
        viewBinding true
    }

    defaultConfig {
        applicationId "nl.rijksoverheid.ctr.verifier"
        versionCode appVersionCode
        versionName version
        vectorDrawables.useSupportLibrary = true

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        buildConfigField "String", "SIGNATURE_CERTIFICATE_CN_MATCH", '".coronatester.nl"'
        buildConfigField "boolean", "FEATURE_CORONA_CHECK_API_CHECKS", "true"
        buildConfigField "boolean", "FEATURE_TEST_PROVIDER_API_CHECKS", "true"
        buildConfigField "String", "BASE_API_URL", "\"https://verifier-api.coronacheck.nl/v8/\""
        buildConfigField "String", "CDN_API_URL", "\"https://verifier-api-cdn.coronacheck.nl/v8/\""
        manifestPlaceholders = [appLabel: "@string/app_name", deepLinkHost: "coronacheck.nl"]
        ndk {
            debugSymbolLevel "FULL"
        }
    }

    signingConfigs {
        release {
            storeFile file('../keystore.jks')
            storePassword System.getenv("KEYSTORE_PASSWORD")
            keyAlias System.getenv("KEYSTORE_KEY_ALIAS")
            keyPassword System.getenv("KEYSTORE_KEY_PASSWORD")
        }
    }

    flavorDimensions "environment"
    productFlavors {
        acc {
            dimension "environment"
            versionNameSuffix "-acc"
            applicationIdSuffix ".acc"
            manifestPlaceholders = [appLabel: "@string/app_name_acc"]
            buildConfigField "String", "BASE_API_URL", "\"https://verifier-api.acc.coronacheck.nl/v8/\""
            buildConfigField "String", "CDN_API_URL", "\"https://verifier-api-cdn.acc.coronacheck.nl/v8/\""
            apply plugin: 'com.google.gms.google-services'
            apply plugin: 'com.google.firebase.crashlytics'
            manifestPlaceholders = [appLabel: "@string/app_name_acc", deepLinkHost: "web.acc.coronacheck.nl"]
            matchingFallbacks = ['mlkit']
        }
        fdroidAcc {
            dimension "environment"
            versionNameSuffix "-fdroid"
            applicationIdSuffix ".fdroid.acc"
            manifestPlaceholders = [appLabel: "@string/app_name_acc"]
            buildConfigField "String", "BASE_API_URL", "\"https://verifier-api.acc.coronacheck.nl/v8/\""
            buildConfigField "String", "CDN_API_URL", "\"https://verifier-api-cdn.acc.coronacheck.nl/v8/\""
            manifestPlaceholders = [appLabel: "@string/app_name_acc", deepLinkHost: "web.acc.coronacheck.nl"]
            matchingFallbacks = ['zxing']
        }
        prod {
            dimension "environment"
            matchingFallbacks = ['mlkit']
        }
        fdroidProd {
            dimension "environment"
            matchingFallbacks = ['zxing']
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            productFlavors.acc.signingConfig signingConfigs.release
            productFlavors.prod.signingConfig signingConfigs.release
        }
    }

    compileOptions {
        coreLibraryDesugaringEnabled true
    }
}

ksp {
    arg("room.schemaLocation", "$projectDir/schemas")
}

kotlin {
    sourceSets {
        main.kotlin.srcDirs += 'build/generated/ksp/main/kotlin'
        test.kotlin.srcDirs += 'build/generated/ksp/test/kotlin'
    }
}

dependencies {
    implementation project(":shared")
    implementation project(":appconfig")
    implementation project(":design")
    implementation project(":introduction")
    implementation project(":api")
    implementation project(':mobilecore')
    implementation project(":qrscanner")

    implementation libs.bundles.groupie
    implementation libs.navigation.fragment
    implementation libs.navigation.ui
    implementation libs.koin.android
    implementation libs.androidx.preference
    implementation libs.constraintlayout
    implementation libs.timber
    implementation libs.androidx.security.crypto
    implementation libs.mlkit.barcode
    implementation(platform(libs.okhttp.bom))
    implementation libs.room.runtime
    implementation libs.room
    implementation libs.sqlcipher
    implementation libs.lottie
    ksp libs.room.compiler
    testImplementation libs.room.testing


    testImplementation libs.androidx.test.runner
    testImplementation libs.junit
    testImplementation libs.mockk
    testImplementation libs.coroutines.test
    testImplementation libs.androidx.core.testing
    testImplementation(libs.robolectric) {
        exclude group: 'org.bouncycastle'
    }
    testImplementation(libs.barista) {
        exclude group: "org.jetbrains.kotlin"
    }
    testImplementation libs.koin.test.junit4
    testImplementation libs.navigation.testing

    coreLibraryDesugaring libs.desugar

    accImplementation libs.crashlytics

    debugImplementation libs.fragment.testing
}
